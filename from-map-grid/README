= Georeferencing from Graticules =

== 1. Georeferencing via adding GCPs at each graticule intersection ==

Using extract-coords.pl.

For the maps that had a grid on them like as shown in sample_original.jpg I used
Inkscape to trace the lines of latitude and label these paths with the
coordinates of these lines. I then used the perl script to generate a .points
file which contains all the ground control points (GCPs) from the tracing.

The script is very unstable and it may not warn when things are going wrong, so
if you use it, use it with caution.

Basically my work flow was,

1. I opened the original map in Inkscape,
2. then using the tool to draw straight multi-segment lines,
3. for each line of latitude (horizontal line), going from left to right, I
4.   added a node in the line at each intersection with a line of longitude
     (vertical line). No lines of longitude are skipped, if you need to skip one
     end the line, then start a new line segment. That horizontal path is then
     named with an id of lat${lat}_lon${startLon-endLon}. Then -endLon is
     optional and if omitted only the first point in the line is used.

See the sample_traced.svg file for an example.

The next step is to run extract-coords.pl on this SVG file. This should
(remember the script is not robust) give you a GCP file which is a set of
control points that relates positions on the raster image to georeferenced
coordinates.

If extract-coords.pl gives you any error messages or warnings, anything in
addition to the "Found n GCPs." then there was a problem, probably with your
labelling of the paths.


== 2. Georeferencing via tracing graticules using intersection points as GCPs ==

pmapgrid2gcps.pl is designed to take a specially crafted SVG file and make a CGP
file for GDAL using the intersection points of the traced graticules.

The SVG file should consist of paths with two nodes per path which trace the
graticules. The path id should be the label on the parish map. eg. "w220" or
"s400". In the case of zero, use either n0 or s0 for horizontal graticules or
e0 or w0 for vertical graticules.

This script will find the intersection of these lines and output those points of
intersection as GCPs.


== 3. Georeferencing via tracing graticules to form a World File ==

The java program in graticules2wld is designed to, rather than outputing the
intersection points as GCPs, find a kind of "best-fit" construction of a World
File (affine transformation from image coordinate space into world projected
coordinates).

To abstract the details of reading the SVG files from the graticules2wld
program, it reads an intermediate format which pmap-svggraticules2csv.pl will
create from the source SVG files.

